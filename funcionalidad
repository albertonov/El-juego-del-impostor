
1) Definiir el objetivo del proyecto

Juego basado en Web
Multijugador
Usuarios anónimos
---
Con una arquitectura basada en servicios
SaaS - Software as a Service

2) Metodología y herramientas

Metodología ágil: Scrum + XP
Kunagi --> credenciales
GitHub

3) Organización de la solución
Organización de la solución en FS:
proyectos/git

4) Git commmand line tools
Instalamos command line tools:
- abrir un terminal o command
- git --version

5) GitHub
Creamos el repositorio "impostor" en GitHub
Clonamos en local:
-> git clone cada-uno-su-repo

6) StarUML
Diagrama inicial de despliegue

7) Funciones de callback
Funciones de callback


8) Ejercicios Javascript (clonar)

9) Primer artefacto y actualizar el repo
Volvemos a la solucion Impostor
creamos el index.html
Actualizamos el repo remoto:
git add .
git commit -m"index inicial"
git push


1) Definiir el objetivo del proyecto

Juego basado en Web
Multijugador
Usuarios anónimos
---
Con una arquitectura basada en servicios
SaaS - Software as a Service

2) Metodología y herramientas

Metodología ágil: Scrum + XP
Kunagi --> credenciales
GitHub

3) Organización de la solución
Organización de la solución en FS:
proyectos/git

4) Git commmand line tools
Instalamos command line tools:
- abrir un terminal o command
- git --version

5) GitHub
Creamos el repositorio "impostor" en GitHub
Clonamos en local:
-> git clone cada-uno-su-repo

6) StarUML
Diagrama inicial de despliegue

7) Funciones de callback
Funciones de callback


8) Ejercicios Javascript (clonar)

9) Primer artefacto y actualizar el repo
Volvemos a la solucion Impostor
creamos el index.html
Actualizamos el repo remoto:
git add .
git commit -m"index inicial"
git push




Funcionalidad
-Abandonar partida
-Modificar partida
-Iniciar partida
-Asignar tareas a los usuarios
-Asignar impostor
-Aracar
-Votar al sospechoso o saltar la votacion